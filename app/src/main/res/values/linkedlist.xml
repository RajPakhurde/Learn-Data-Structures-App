<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="linkedlist_info_1"><b>LINKED LIST</b></string>
    <string name="linkedlist_info_2"><i>Introduction</i></string>
    <string name="linkedlist_info_3">\n \t A linked list, in simple terms, is a linear collection of data elements. These data elements a called nodes. Linked list is a data structure which in turn can be used to implement other da structures. Thus, it acts as a building block to implement data structures like stacks, queues, and their variations. A linked list can be perceived as a train or a sequence of nodes in which node contains one or more data fields and a pointer to the next node.</string>
<!--    ImageView-->
    <string name="linkedlist_info_4">\n \t In Fig, we see a linked list in which every node contains two parts, an integer and a pointer to the next node. The left part of the node which contains data may include a simple data type, an array, or a structure. The right part of the node contains a pointer to the next node (or address of the next node in sequence). The last node will have no next node connected to it, so it will store a special value called NULL. In Fig. 8.1, the NULL pointer is represented by x. But when we do the programming, we usually define NULL as-1. Hence, a NULL pointer denotes the end of the list. Since in a linked list, every node contains a pointer to another node which is of the same type, it is also called a self-referential data type.</string>
    <string name="linkedlist_info_5">\n \t Linked lists contain a pointer variable START that stores the address of the first node in the list We can traverse the entire list using a single pointer variable called START. The START node will contain the address of the first node; the next part of the first node will in turn store the address of its succeeding node. Using this technique, the individual nodes of the list will form a chain of nodes. If START = NULL, then the linked list is empty and contains no nodes.</string>
    <string name="linkedlist_info_6">\n \t In C, we will implement a linked list using the following code: \n \t struct node{ \n \t int data; \n \t struct node *next; \n \t };</string>
    <string name="linkedlist_info_7">\n \t Let us see how a linked list is maintained in the memory. In order to form a linked list, we need a structure called node which has two fields, DATA and NEXT. DATA will store the information part and NEXT will store the address of the next node in sequence. Consider Fig.</string>
<!--    ImageView-->
    <string name="linkedlist_info_8">\n \t In the figure, we see that the variable START is used to store the address of the first node. Here, in this example, START 1, so the first data is stored at address 1, which is H. The corresponding NEXT stores the address of the next node, which is 4. Sq, we will look at address 4 to fetch the next data item. The second data element obtained from address 4 is E. Again, we see the corresponding NEXT to go to the next node. From the entry in the NEXT, we get the next address, that is 7, and fetch L as the data. We repeat this procedure until we reach a position where the NEXT entry contains -1 or Null, as this would denote the end of the linked list. When we traverse DATA and NEXT in this manner, we finally see that the linked list in the above example stores characters that when put together forms the word HELLO.</string>
    <string name="linkedlist_info_9">\n \t Note that the figure shows a chunk of memory locations whose address ranges from 1 to 10. The shaded portion contains data for other applications. Remember that the nodes of a linked list need not be in consecutive memory locations. In our example, the nodes for the linked list are stored at addresses 1, 4, 7, 8, and 10. </string>
    <string name="linkedlist_info_10">\n \t Let us take another example to see how two linked lists are maintained together in the computers memory. For example, the students of Class XI of Science group are asked to choose between Biology and Computer Science. Now, we will maintain two linked lists, one for each subject. That is, the first linked list will contain the roll numbers of all the students who have opted for Biology and the second list will contain the roll numbers of students who have chosen Computer Science.</string>
<!--    ImageView-->
    <string name="linkedlist_info_11">\n \t Now, look at Fig. 8.3. Two different linked lists are simultaneously maintained in the memory. There is no ambiguity in traversing through the list because each list maintains a separate Start pointer, which gives the address of the first node of their respective linked lists. The rest of the nodes are reached by looking at the value stored in the NEXT.</string>
    <string name="linkedlist_info_12">\n \t By looking at the figure, we can conclude that roll number of the students who have opted for Biology are S01, S03, S06, S08, S10, and $11. Similarly, roll number of the students who chose Computer Science are S02, S04, S05, S07, and S09.</string>
    <string name="linkedlist_info_13">\n \t We have already said that the DATA part of a node may contain just a single data item, an array, or a structure. Let us take an example to see how a structure is maintained in a linked list that is stored in the memory.</string>
    <string name="linkedlist_info_14">\n \t Consider a scenario in which the roll number, name, aggregate, and grade of students are stored using linked lists. Now, we will see how the NEXT pointer is used to store the data alphabetically.</string>
<!--    ImageView-->

</resources>